===================
在課程會談到的觀念集錦
===================

數學的重要性
----------
- 「下一個突破性的偉大消費科技，重點不在設計或科技，而在於處理複雜的數學程式，演算法（algorithms）將是未來科技的關鍵」 / 「消費科技市場從未如此需要數學人才，發展感測器科技、改進智慧演算法，將會帶來重大的破壞性創新」, Duncan Smith / Cambridge Consultants
  * http://wired.tw/2012/09/24/mathematicians-disruption

發揮潛力
-------
- 勵志演說家 Les Brown 曾比喻：「想像你即將去世，圍繞著在你床邊的是你尚未發揮之潛力的鬼魂、你未曾付諸行動之想法的鬼魂、你尚未使用之才能的鬼魂；它們圍繞在你床 邊，滿懷憤怒、失望和沮喪，它們說：『我們來找你，因為你本來有機會賦予我們生命，現在我們得和你一起進墳墓了。』」

不要妄自菲薄
----------
- 成大會計系碩士論文題目：「`藉由迴避衝突來提昇 Transactional Memory 效能之研究<http://etds.lib.ncku.edu.tw/etdservice/view_metadata?etdun=U0026-1004201213190900&query_field1=keyword&query_word1=TM>`_」
  * 連會計系都做 Software Transactional Memory，那資工系的學生不就都飛天了？

為什麼要問為什麼？
---------------
- 「我常會覺得台灣的大學生是在念高中，原因就是很多人想要的只是標準答案，想要的只是高分。卻不知道自己要念什麼，為什麼而念，念這些對什麼事情有幫助，能夠應用在哪裡。」
  * http://twghome.pixnet.net/blog/post/22085956

就去作吧！
--------
- 「你的行動或許沒有意義，但你還是非做不可。這不是為了改變世界，而是為了讓你成為，不會被世界改變的那個人」，甘地

01, 100, *, 0
--------------
- 電子科技業：美國人發明產品，日本人做好，韓國人作爛，華人做到沒錢賺！

第 22 條軍規
-----------
- 要描述兩難的困境，用英文表達可以說 dilemma，也可用 predicament 表示，但有個更為傳神且美國人獨創的說法稱為 Catch-22
- 《第22條軍規》(Catch-22)是美國作家 Joseph Heller 在 1961 年出版的小說書名。揭露第二次世界大戰時美國空軍中一些不合理、近乎荒謬的規定，如：出任務只能到一定的次數，若超過就會被斷定為精神不正常，必須停飛休假；可是休假要自己提出，一旦休假的要求提出後，卻又被認為精神正常得繼續飛
- 也可說是 no win situation (無論如何，都不能贏)

困境與抉擇
----------------
- 清大退休教授彭明輝：「 我沒有過困境，因為我從不在乎外在的得失，也不武斷地和別人比高下，而只在乎自己內在真實的累積。我沒有過困境，因為我確實瞭解到：生命是一種長期而持續的累積過程，絕不會因為單一的事件而有劇烈的起伏」
- 屬於我們該得的，遲早會得到；屬於我們不該得的，即使一分也不可能長久持有。假如你可以分享這些信念，那麼人生於你也將會是寬廣而長遠，沒有什麼了不得的「困境」，也沒有什麼好焦慮的了
- http://mhperng.blogspot.tw/2011/03/blog-post_3186.html

軟體缺失
-------------
- 1980 年，北美防空聯合司令部曾告警，美國遭受導彈襲擊，差點釀成第三次世界大戰。後來證實，這是反饋系統的電路故障問題，但反饋系統軟體並未考慮故障問題引發的誤報 
- 1996 年 6 月 4 日，Ariane 5 型運載火箭的首航，原計劃將四顆太陽風觀察衛星運送到預定軌道，但因軟體引發的問題，導致火箭在發射 39 秒後偏軌，從而觸發火箭的自我摧毀裝置。此事件肇因於一系列的 Ada 程式碼錯誤，造成高達 3.7 億美元的損失

基礎訓練
-------------
- 開發作業系統核心，其實並非要證明能力，而只是基於一個簡單的念頭：知曉如何徹底控制硬體，這是學習電腦技術一個重要的里程，唯有如此，你才是「電腦的主人」。但資訊教育若淪為作業系統供應商的「推廣者」時，不覺得很可怕嗎？ 

動手作
---------
- 如果美術老師自己從來不動手素描、調色，或者雕刻，只會拿一堆大師作品來嚇唬你，這樣的美術課程真的會讓你成長嗎？
- 北京清華大學的陳渝教授身體力行，告訴學生雙手萬能。實驗室沒錢買 ARM 硬體怎麼辦？自幹一套完整的硬體模擬器: `Skyeye<http://skyeye.sourceforge.net>`_。學生對作業系統理解不足怎麼辦？自幹一套完整又簡潔的作業系統: `ucore<https://code.google.com/p/ucore-x64-smp/>`_ 來當教材

2012 年操作系統課程設計 (北大清華)
----------------------------------------
- 課程設計目標：「參與到 ucore 的功能移植和完善的過程中，形成一個技術報告；如果可能，基於移植和完善工作寫出可發表的文章。參與到OS科研中來，通過動手實驗來跟著或自己寫出一個的 paper 或技術報告。」
- http://os.cs.tsinghua.edu.cn/oscourse/OS2012/projects

找工作，本質上就是買賣
------------------
- 「找工作，本質上就是買賣；我們一般人多數都是當買家，而年輕人特別缺少當賣家的經驗，所以當他們第一次要出賣自己二十幾歲的青春幫一家公司做事時，往往不太清楚自己值多少錢；學校更沒有教學生怎麼判斷自己值多少錢，導致最後全都是買家亂喊價，還用社會壓力要你接受。」
- http://pesty.yichi.org/blog/2012/10/11/salery/

Dennis Ritchie 逝世一週年
-----------------------
- 2011 年 10 月 12 日，C 語言和 Unix 共同作者 Dennis Ritchie 逝世 (1941-2011)
- 著名電腦科學家 Brian Kernighan 說，牛頓說他是站在巨人的肩膀上，而「我們都是在站在 Dennis 的肩膀上」
- 上個月，貝爾實驗室辦了紀念活動「`Dennis Ritchie 的永久遺產：軟體對社會的影響<http://lucent.com/events/2012/dennis-ritchie/>`_」
  * `C, the Enduring Legacy of Dennis Ritchie<http://www.cs.columbia.edu/~aho/Talks/12-09-07_DMR.pdf>`_

- 前貝爾實驗室研究員 Al Aho 教授在紀念活動中闡述 C 語言的重要性，他說 C 的變種控制了從 iPhone 到火星好奇號的各種機器
  * http://www.youtube.com/watch?v=GfoSbffSIQ4

Linus Torvalds 談軟體
--------------------
- 現實是複雜的，不存有一劑良藥解萬愁的問題解決模式，現實的問題解決需要大量艱苦工作，以在細節上做到正確無誤
- http://linux.solidot.org/article.pl?sid=12/10/12/0915259

在自身找機會
----------
- 當把注意力放在「別人應該如何如何做才對」時，常常所見世事盡是缺點。當把心思放在「我可以怎樣怎樣做時」，反而所有問題都是機會

灰姑娘真能穿玻璃鞋跳舞？
---------------------
- 擁有技術和機械學位的機械工程師Antariksh Bothale 在問答網站 Quora 中表示：
  * 「每當我們設計一必須承受某種重量的物品時，我們會針對各種可能的失敗模式一再測試，以確保該物品可以適用於所有使用者」
  * http://www.eettaiwan.com/ART_8800676444_676964_NT_557e5885.HTM