Vector
========
Introduction
--------
Vector是c++中陣列的替代型態,可以自主控制需要的記憶體。
Vector可以任意增加陣列長度及資料的數量，也可任意插入或刪除指定位置的資料。

基礎運用
--------
使用vector需要加入標頭檔vector

ex:
```c
#include <vector>
```
宣告新vector的語法
```c
vector<type> vector_name(amount,element);
```
ex:
```c
vector<int> acm(3,4);
vector<float> csie(5);//未指定數字會補 0
```
嘗試印出兩vector內容

output:
```c
acm : 4 4 4
csie : 0 0 0 0 0 
```
也可以直接建立空白的vector

ex:
```c
vector<int> acm;
```
此外也可以使用陣列為基礎來建構vector，將陣列原有的資料放入vector中

如此的指定方式，需要提供的參數為起始位址與結束位址

ex:
```c
int array[5]={1,2,3,4,5};
vector<int> ncku(array,array+5);//1 2 3 4 5 
vector<int> csie(array+1,array+4);//2 3 4
```

Member functions
----------------------------

### operator[]
中括號[]的用法與array相同，指的是vector中的指定項元素
```c
int array[5]={1,2,3,4,5};
vector<int> ncku(array,array+5);
cout << ncku[2] << endl; 
```
output:
```c
3
```
### iterator迭代器/.begin() /.end()
若要讀取資料的話也可以定義iterator來進行進一步的操作
```c
vactor <int>::iterator it;
vactor <float>::iterator it2;
```
.begin()會將iterator指向第一筆資料

.end()會將iterator指向最後一筆資料

完整程式碼範例

ex:
```c
#include <iostream>
#include <vector>
using namespace std;

vector<int> acm(3,4);
vector<int>::iterator it;

void vector_print(vector<int> v){

	cout << "The vector contains these elements : " << endl;
	for(it = v.begin(); it != v.end(); it++){
		cout << *it << " ";
	}//prints the vector from the first element to the last element
	cout << endl;
}

int main(){
    int n;
    vector_print(acm);
    return 0;
}
```
Output:
```c
The vector contains these elements :
4 4 4

```

### .push_back()/.pop_back()
.push_back()會將小括號內的資料加入vector尾端

而.pop_back則會刪去最後面的資料

ex:
```c
char ar[5]={'a','b','c','d','e'};
vector<char> csie(ar,ar+5);
vector<char>::iterator it;
vector_print(csie);

csie.push_back('f');
vector_print(csie);

csie.push_back('g');
vector_print(csie);

csie.pop_back();
vector_print(csie);

csie.pop_back();
vector_print(csie);
```

output:
```c
a b c d e
a b c d e f
a b c d e f g
a b c d e f 
a b c d e
```

### .size()

.size會回傳vector大小
```c
vector<int> acm(5);
cout << acm.size() << endl;
```
output:
```c
5
```
### .clear() / .empty()
.clear()會刪除vector內的所有元素，clear後的vector大小會為0

而.empty()則會測試vector是否為空的，是則回傳ture，否則回傳false

注意：empty只會測試是否為空，並不會清空vector內資料
```c
vector<int> acm;

acm.push_back(100);
acm.push_back(200);
acm.push_back(300);
cout << "the original size is : " 
     << acm.size() 
     << endl;

acm.clear();	
cout << "after cleaning, the size is : "
     << acm.size() 
     << endl;

if(acm.empty()==true){
    cout << "the vector is empty!"
	 << endl;
}

```
output:
```c
the original size is : 3
after cleaning, the size is : 0
the vector is empty!
```
### .erase() / .insert()
### .assign()