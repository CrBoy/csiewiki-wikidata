Vector
========
Introduction
--------
Vector是c++中陣列的替代型態,可以自主控制需要的記憶體。
Vector可以任意增加陣列長度及資料的數量，也可任意插入或刪除指定位置的資料。

基礎運用
--------
使用vector需要加入標頭檔<vector>

ex:
```c
#include <vector>
```
建立新vector的語法

vector<type> vector_name(amount,element);

ex:
```c
vector<int> acm(3,4);
vector<float> csie(5);
```
嘗試印出兩vector內容

output:
```c
acm : 4 4 4
csie : 0 0 0 0 0 
```
也可以直接建立空白的vector

ex:
```c
vector<int> acm;
```

若要讀取資料的話需要先定義iterator（迭代器）以進行進一步的操作
```c
vactor <int>::iterator it;
vactor <float>::iterator it2;
```
完整程式碼範例

ex:
```c
#include <iostream>
#include <vector>
using namespace std;

vector<int> acm(3,4);
vector<int>::iterator it;

void vector_print(){

	cout << "The vector contains these elements : " << endl;
	for(it = acm.begin(); it != acm.end(); it++){
		cout << *it << " ";
	}//prints the vector from the first element to the last element
	cout << endl;
}

int main(){
    int n;
    vector_print();
    return 0;
}
```
Output:
```c
The vector contains these elements :
4 4 4

```

Member functions
----------------------------

### operator[]
>
### .push_back()
### .pop_back()
### .begin() / .end()

>.begin()會將iterator指向第一筆資料

>.end()會將iterator指向最後一筆資料

### .size()

>.size會回傳vector大小
### .clear() / .empty()

### .erase() / .insert()
### .assign()